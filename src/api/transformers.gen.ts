// This file is auto-generated by @hey-api/openapi-ts

import type {
  PostApiAuthenticationLoginResponse,
  PostApiAuthenticationReauthenticateResponse,
  GetApiCurrentGameGetCurrentGameForCurrentUserResponse,
  GetApiCurrentGameGetCurrentGameBySessionIdBySessionIdResponse,
  GetApiPreviousGameGetPreviousGamesForCurrentUserResponse,
  GetApiPreviousGameGetPreviousGameBySessionIdBySessionIdResponse,
  GetApiQuestionGetQuestionsForCurrentUserResponse,
  GetApiQuestionGetQuestionsByQuestionGroupIdByQuestionGroupIdResponse,
  GetApiQuestionGetQuestionByQuestionIdResponse,
  GetApiQuestionGroupGetQuestionGroupsForCurrentUserResponse,
  GetApiQuestionGroupGetQuestionGroupsByQuizIdByQuizIdResponse,
  GetApiQuestionGroupGetQuestionGroupByQuestionGroupIdResponse,
  GetApiQuizGetQuizzesForCurrentUserResponse,
  GetApiQuizGetQuizByCurrentGameIdByCurrentGameIdResponse,
  GetApiQuizGetQuizByQuizIdResponse,
  GetApiUserGetCurrentUserResponse,
} from "./types.gen";

const backendModelsDtosAuthenticationDtoSchemaResponseTransformer = (data: any) => {
  if (data.userId) {
    data.userId = BigInt(data.userId.toString());
  }
  return data;
};

export const postApiAuthenticationLoginResponseTransformer = async (data: any): Promise<PostApiAuthenticationLoginResponse> => {
  data = backendModelsDtosAuthenticationDtoSchemaResponseTransformer(data);
  return data;
};

export const postApiAuthenticationReauthenticateResponseTransformer = async (data: any): Promise<PostApiAuthenticationReauthenticateResponse> => {
  data = backendModelsDtosAuthenticationDtoSchemaResponseTransformer(data);
  return data;
};

const backendModelsDtosQuestionDtoSchemaResponseTransformer = (data: any) => {
  if (data.questionId) {
    data.questionId = BigInt(data.questionId.toString());
  }
  if (data.questionGroupId) {
    data.questionGroupId = BigInt(data.questionGroupId.toString());
  }
  return data;
};

const backendModelsDtosCurrentGameQuestionDtoSchemaResponseTransformer = (data: any) => {
  data.question = backendModelsDtosQuestionDtoSchemaResponseTransformer(data.question);
  return data;
};

const backendModelsDtosUserDtoSchemaResponseTransformer = (data: any) => {
  if (data.userId) {
    data.userId = BigInt(data.userId.toString());
  }
  return data;
};

const backendModelsDtosCurrentGameUserDtoSchemaResponseTransformer = (data: any) => {
  data.user = backendModelsDtosUserDtoSchemaResponseTransformer(data.user);
  return data;
};

const backendModelsDtosCurrentGameDtoSchemaResponseTransformer = (data: any) => {
  if (data.currentGameId) {
    data.currentGameId = BigInt(data.currentGameId.toString());
  }
  if (data.quizId) {
    data.quizId = BigInt(data.quizId.toString());
  }
  if (data.currentGameQuestions) {
    data.currentGameQuestions = data.currentGameQuestions.map((item: any) => {
      return backendModelsDtosCurrentGameQuestionDtoSchemaResponseTransformer(item);
    });
  }
  if (data.currentGameUsers) {
    data.currentGameUsers = data.currentGameUsers.map((item: any) => {
      return backendModelsDtosCurrentGameUserDtoSchemaResponseTransformer(item);
    });
  }
  return data;
};

export const getApiCurrentGameGetCurrentGameForCurrentUserResponseTransformer = async (data: any): Promise<GetApiCurrentGameGetCurrentGameForCurrentUserResponse> => {
  data = backendModelsDtosCurrentGameDtoSchemaResponseTransformer(data);
  return data;
};

export const getApiCurrentGameGetCurrentGameBySessionIdBySessionIdResponseTransformer = async (
  data: any,
): Promise<GetApiCurrentGameGetCurrentGameBySessionIdBySessionIdResponse> => {
  data = backendModelsDtosCurrentGameDtoSchemaResponseTransformer(data);
  return data;
};

const backendModelsDtosPreviousGameUserDtoSchemaResponseTransformer = (data: any) => {
  if (data.userId) {
    data.userId = BigInt(data.userId.toString());
  }
  return data;
};

const backendModelsDtosPreviousGameDtoSchemaResponseTransformer = (data: any) => {
  if (data.previousGameId) {
    data.previousGameId = BigInt(data.previousGameId.toString());
  }
  if (data.completedOn) {
    data.completedOn = new Date(data.completedOn);
  }
  if (data.previousGameUsers) {
    data.previousGameUsers = data.previousGameUsers.map((item: any) => {
      return backendModelsDtosPreviousGameUserDtoSchemaResponseTransformer(item);
    });
  }
  return data;
};

export const getApiPreviousGameGetPreviousGamesForCurrentUserResponseTransformer = async (data: any): Promise<GetApiPreviousGameGetPreviousGamesForCurrentUserResponse> => {
  data = data.map((item: any) => {
    return backendModelsDtosPreviousGameDtoSchemaResponseTransformer(item);
  });
  return data;
};

export const getApiPreviousGameGetPreviousGameBySessionIdBySessionIdResponseTransformer = async (
  data: any,
): Promise<GetApiPreviousGameGetPreviousGameBySessionIdBySessionIdResponse> => {
  data = backendModelsDtosPreviousGameDtoSchemaResponseTransformer(data);
  return data;
};

export const getApiQuestionGetQuestionsForCurrentUserResponseTransformer = async (data: any): Promise<GetApiQuestionGetQuestionsForCurrentUserResponse> => {
  data = data.map((item: any) => {
    return backendModelsDtosQuestionDtoSchemaResponseTransformer(item);
  });
  return data;
};

export const getApiQuestionGetQuestionsByQuestionGroupIdByQuestionGroupIdResponseTransformer = async (
  data: any,
): Promise<GetApiQuestionGetQuestionsByQuestionGroupIdByQuestionGroupIdResponse> => {
  data = data.map((item: any) => {
    return backendModelsDtosQuestionDtoSchemaResponseTransformer(item);
  });
  return data;
};

export const getApiQuestionGetQuestionByQuestionIdResponseTransformer = async (data: any): Promise<GetApiQuestionGetQuestionByQuestionIdResponse> => {
  data = backendModelsDtosQuestionDtoSchemaResponseTransformer(data);
  return data;
};

const backendModelsDtosQuestionGroupDtoSchemaResponseTransformer = (data: any) => {
  if (data.questionGroupId) {
    data.questionGroupId = BigInt(data.questionGroupId.toString());
  }
  if (data.questions) {
    data.questions = data.questions.map((item: any) => {
      return backendModelsDtosQuestionDtoSchemaResponseTransformer(item);
    });
  }
  return data;
};

export const getApiQuestionGroupGetQuestionGroupsForCurrentUserResponseTransformer = async (data: any): Promise<GetApiQuestionGroupGetQuestionGroupsForCurrentUserResponse> => {
  data = data.map((item: any) => {
    return backendModelsDtosQuestionGroupDtoSchemaResponseTransformer(item);
  });
  return data;
};

export const getApiQuestionGroupGetQuestionGroupsByQuizIdByQuizIdResponseTransformer = async (data: any): Promise<GetApiQuestionGroupGetQuestionGroupsByQuizIdByQuizIdResponse> => {
  data = data.map((item: any) => {
    return backendModelsDtosQuestionGroupDtoSchemaResponseTransformer(item);
  });
  return data;
};

export const getApiQuestionGroupGetQuestionGroupByQuestionGroupIdResponseTransformer = async (data: any): Promise<GetApiQuestionGroupGetQuestionGroupByQuestionGroupIdResponse> => {
  data = backendModelsDtosQuestionGroupDtoSchemaResponseTransformer(data);
  return data;
};

const backendModelsDtosQuizDtoSchemaResponseTransformer = (data: any) => {
  if (data.quizId) {
    data.quizId = BigInt(data.quizId.toString());
  }
  if (data.questionGroups) {
    data.questionGroups = data.questionGroups.map((item: any) => {
      return backendModelsDtosQuestionGroupDtoSchemaResponseTransformer(item);
    });
  }
  return data;
};

export const getApiQuizGetQuizzesForCurrentUserResponseTransformer = async (data: any): Promise<GetApiQuizGetQuizzesForCurrentUserResponse> => {
  data = data.map((item: any) => {
    return backendModelsDtosQuizDtoSchemaResponseTransformer(item);
  });
  return data;
};

export const getApiQuizGetQuizByCurrentGameIdByCurrentGameIdResponseTransformer = async (data: any): Promise<GetApiQuizGetQuizByCurrentGameIdByCurrentGameIdResponse> => {
  data = backendModelsDtosQuizDtoSchemaResponseTransformer(data);
  return data;
};

export const getApiQuizGetQuizByQuizIdResponseTransformer = async (data: any): Promise<GetApiQuizGetQuizByQuizIdResponse> => {
  data = backendModelsDtosQuizDtoSchemaResponseTransformer(data);
  return data;
};

export const getApiUserGetCurrentUserResponseTransformer = async (data: any): Promise<GetApiUserGetCurrentUserResponse> => {
  data = backendModelsDtosUserDtoSchemaResponseTransformer(data);
  return data;
};
