// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from "@hey-api/client-fetch";
import type {
  PostApiAuthenticationLoginData,
  PostApiAuthenticationLoginResponse,
  PostApiAuthenticationReauthenticateData,
  PostApiAuthenticationReauthenticateResponse,
  GetApiCurrentGameGetCurrentGameForCurrentUserData,
  GetApiCurrentGameGetCurrentGameForCurrentUserResponse,
  GetApiCurrentGameGetCurrentGameBySessionIdBySessionIdData,
  GetApiCurrentGameGetCurrentGameBySessionIdBySessionIdResponse,
  PostApiCurrentGameCreateCurrentGameData,
  PutApiCurrentGameUpdateCurrentGameData,
  DeleteApiCurrentGameDeleteCurrentGameByCurrentGameIdData,
  PostApiGameFlowAddUserToCurrentGameData,
  PostApiGameFlowStartGameData,
  PostApiGameFlowSelectQuestionData,
  PostApiGameFlowSubmitAnswerData,
  PostApiGameFlowSubmitAnswerResponse,
  PostApiGameFlowRobQuestionData,
  PostApiGameFlowRobQuestionResponse,
  PostApiGameFlowLeaveGameData,
  PostApiGameFlowCancelGameData,
  PostApiGameFlowSelectNextPlayerData,
  PostApiGameFlowAllowRobbingData,
  GetApiHealthData,
  GetApiHealthDetailedData,
  GetApiHealthDatabaseData,
  GetApiHealthMetricsData,
  GetApiPreviousGameGetPreviousGamesForCurrentUserData,
  GetApiPreviousGameGetPreviousGamesForCurrentUserResponse,
  GetApiPreviousGameGetPreviousGameBySessionIdBySessionIdData,
  GetApiPreviousGameGetPreviousGameBySessionIdBySessionIdResponse,
  GetApiQuestionGetQuestionsForCurrentUserData,
  GetApiQuestionGetQuestionsForCurrentUserResponse,
  GetApiQuestionGetQuestionsByQuestionGroupIdByQuestionGroupIdData,
  GetApiQuestionGetQuestionsByQuestionGroupIdByQuestionGroupIdResponse,
  GetApiQuestionGetQuestionByQuestionIdData,
  GetApiQuestionGetQuestionByQuestionIdResponse,
  PostApiQuestionCreateQuestionData,
  PutApiQuestionUpdateQuestionData,
  DeleteApiQuestionDeleteQuestionByQuestionIdData,
  GetApiQuestionGroupGetQuestionGroupsForCurrentUserData,
  GetApiQuestionGroupGetQuestionGroupsForCurrentUserResponse,
  GetApiQuestionGroupGetQuestionGroupsByQuizIdByQuizIdData,
  GetApiQuestionGroupGetQuestionGroupsByQuizIdByQuizIdResponse,
  GetApiQuestionGroupGetQuestionGroupByQuestionGroupIdData,
  GetApiQuestionGroupGetQuestionGroupByQuestionGroupIdResponse,
  PostApiQuestionGroupCreateQuestionGroupData,
  PutApiQuestionGroupUpdateQuestionGroupData,
  DeleteApiQuestionGroupDeleteQuestionGroupByQuestionGroupIdData,
  GetApiQuizGetQuizzesForCurrentUserData,
  GetApiQuizGetQuizzesForCurrentUserResponse,
  GetApiQuizGetQuizByCurrentGameIdByCurrentGameIdData,
  GetApiQuizGetQuizByCurrentGameIdByCurrentGameIdResponse,
  GetApiQuizGetQuizByQuizIdData,
  GetApiQuizGetQuizByQuizIdResponse,
  PostApiQuizCreateQuizData,
  PutApiQuizUpdateQuizData,
  DeleteApiQuizDeleteQuizByQuizIdData,
  GetApiUserGetCurrentUserData,
  GetApiUserGetCurrentUserResponse,
  PostApiUserCreateUserData,
  PutApiUserUpdateUserData,
  DeleteApiUserDeleteUserByUserIdData,
} from "./types.gen";
import {
  postApiAuthenticationLoginResponseTransformer,
  postApiAuthenticationReauthenticateResponseTransformer,
  getApiCurrentGameGetCurrentGameForCurrentUserResponseTransformer,
  getApiCurrentGameGetCurrentGameBySessionIdBySessionIdResponseTransformer,
  getApiPreviousGameGetPreviousGamesForCurrentUserResponseTransformer,
  getApiPreviousGameGetPreviousGameBySessionIdBySessionIdResponseTransformer,
  getApiQuestionGetQuestionsForCurrentUserResponseTransformer,
  getApiQuestionGetQuestionsByQuestionGroupIdByQuestionGroupIdResponseTransformer,
  getApiQuestionGetQuestionByQuestionIdResponseTransformer,
  getApiQuestionGroupGetQuestionGroupsForCurrentUserResponseTransformer,
  getApiQuestionGroupGetQuestionGroupsByQuizIdByQuizIdResponseTransformer,
  getApiQuestionGroupGetQuestionGroupByQuestionGroupIdResponseTransformer,
  getApiQuizGetQuizzesForCurrentUserResponseTransformer,
  getApiQuizGetQuizByCurrentGameIdByCurrentGameIdResponseTransformer,
  getApiQuizGetQuizByQuizIdResponseTransformer,
  getApiUserGetCurrentUserResponseTransformer,
} from "./transformers.gen";
import { client as _heyApiClient } from "./client.gen";

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

export const postApiAuthenticationLogin = <ThrowOnError extends boolean = false>(options?: Options<PostApiAuthenticationLoginData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).post<PostApiAuthenticationLoginResponse, unknown, ThrowOnError>({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    responseTransformer: postApiAuthenticationLoginResponseTransformer,
    url: "/api/Authentication/Login",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

export const postApiAuthenticationReauthenticate = <ThrowOnError extends boolean = false>(options?: Options<PostApiAuthenticationReauthenticateData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).post<PostApiAuthenticationReauthenticateResponse, unknown, ThrowOnError>({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    responseTransformer: postApiAuthenticationReauthenticateResponseTransformer,
    url: "/api/Authentication/Reauthenticate",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

export const getApiCurrentGameGetCurrentGameForCurrentUser = <ThrowOnError extends boolean = false>(
  options?: Options<GetApiCurrentGameGetCurrentGameForCurrentUserData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<GetApiCurrentGameGetCurrentGameForCurrentUserResponse, unknown, ThrowOnError>({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    responseTransformer: getApiCurrentGameGetCurrentGameForCurrentUserResponseTransformer,
    url: "/api/CurrentGame/GetCurrentGameForCurrentUser",
    ...options,
  });
};

export const getApiCurrentGameGetCurrentGameBySessionIdBySessionId = <ThrowOnError extends boolean = false>(
  options: Options<GetApiCurrentGameGetCurrentGameBySessionIdBySessionIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<GetApiCurrentGameGetCurrentGameBySessionIdBySessionIdResponse, unknown, ThrowOnError>({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    responseTransformer: getApiCurrentGameGetCurrentGameBySessionIdBySessionIdResponseTransformer,
    url: "/api/CurrentGame/GetCurrentGameBySessionId/{sessionId}",
    ...options,
  });
};

export const postApiCurrentGameCreateCurrentGame = <ThrowOnError extends boolean = false>(options?: Options<PostApiCurrentGameCreateCurrentGameData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/CurrentGame/CreateCurrentGame",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

export const putApiCurrentGameUpdateCurrentGame = <ThrowOnError extends boolean = false>(options?: Options<PutApiCurrentGameUpdateCurrentGameData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).put<unknown, unknown, ThrowOnError>({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/CurrentGame/UpdateCurrentGame",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

export const deleteApiCurrentGameDeleteCurrentGameByCurrentGameId = <ThrowOnError extends boolean = false>(
  options: Options<DeleteApiCurrentGameDeleteCurrentGameByCurrentGameIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/CurrentGame/DeleteCurrentGame/{currentGameId}",
    ...options,
  });
};

export const postApiGameFlowAddUserToCurrentGame = <ThrowOnError extends boolean = false>(options?: Options<PostApiGameFlowAddUserToCurrentGameData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/GameFlow/AddUserToCurrentGame",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

export const postApiGameFlowStartGame = <ThrowOnError extends boolean = false>(options?: Options<PostApiGameFlowStartGameData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/GameFlow/StartGame",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

export const postApiGameFlowSelectQuestion = <ThrowOnError extends boolean = false>(options?: Options<PostApiGameFlowSelectQuestionData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/GameFlow/SelectQuestion",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

export const postApiGameFlowSubmitAnswer = <ThrowOnError extends boolean = false>(options?: Options<PostApiGameFlowSubmitAnswerData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).post<PostApiGameFlowSubmitAnswerResponse, unknown, ThrowOnError>({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/GameFlow/SubmitAnswer",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

export const postApiGameFlowRobQuestion = <ThrowOnError extends boolean = false>(options?: Options<PostApiGameFlowRobQuestionData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).post<PostApiGameFlowRobQuestionResponse, unknown, ThrowOnError>({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/GameFlow/RobQuestion",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

export const postApiGameFlowLeaveGame = <ThrowOnError extends boolean = false>(options?: Options<PostApiGameFlowLeaveGameData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/GameFlow/LeaveGame",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

export const postApiGameFlowCancelGame = <ThrowOnError extends boolean = false>(options?: Options<PostApiGameFlowCancelGameData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/GameFlow/CancelGame",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

export const postApiGameFlowSelectNextPlayer = <ThrowOnError extends boolean = false>(options?: Options<PostApiGameFlowSelectNextPlayerData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/GameFlow/SelectNextPlayer",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

export const postApiGameFlowAllowRobbing = <ThrowOnError extends boolean = false>(options?: Options<PostApiGameFlowAllowRobbingData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/GameFlow/AllowRobbing",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

export const getApiHealth = <ThrowOnError extends boolean = false>(options?: Options<GetApiHealthData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/Health",
    ...options,
  });
};

export const getApiHealthDetailed = <ThrowOnError extends boolean = false>(options?: Options<GetApiHealthDetailedData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/Health/detailed",
    ...options,
  });
};

export const getApiHealthDatabase = <ThrowOnError extends boolean = false>(options?: Options<GetApiHealthDatabaseData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/Health/database",
    ...options,
  });
};

export const getApiHealthMetrics = <ThrowOnError extends boolean = false>(options?: Options<GetApiHealthMetricsData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/Health/metrics",
    ...options,
  });
};

export const getApiPreviousGameGetPreviousGamesForCurrentUser = <ThrowOnError extends boolean = false>(
  options?: Options<GetApiPreviousGameGetPreviousGamesForCurrentUserData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<GetApiPreviousGameGetPreviousGamesForCurrentUserResponse, unknown, ThrowOnError>({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    responseTransformer: getApiPreviousGameGetPreviousGamesForCurrentUserResponseTransformer,
    url: "/api/PreviousGame/GetPreviousGamesForCurrentUser",
    ...options,
  });
};

export const getApiPreviousGameGetPreviousGameBySessionIdBySessionId = <ThrowOnError extends boolean = false>(
  options: Options<GetApiPreviousGameGetPreviousGameBySessionIdBySessionIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<GetApiPreviousGameGetPreviousGameBySessionIdBySessionIdResponse, unknown, ThrowOnError>({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    responseTransformer: getApiPreviousGameGetPreviousGameBySessionIdBySessionIdResponseTransformer,
    url: "/api/PreviousGame/GetPreviousGameBySessionId/{sessionId}",
    ...options,
  });
};

export const getApiQuestionGetQuestionsForCurrentUser = <ThrowOnError extends boolean = false>(options?: Options<GetApiQuestionGetQuestionsForCurrentUserData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).get<GetApiQuestionGetQuestionsForCurrentUserResponse, unknown, ThrowOnError>({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    responseTransformer: getApiQuestionGetQuestionsForCurrentUserResponseTransformer,
    url: "/api/Question/GetQuestionsForCurrentUser",
    ...options,
  });
};

export const getApiQuestionGetQuestionsByQuestionGroupIdByQuestionGroupId = <ThrowOnError extends boolean = false>(
  options: Options<GetApiQuestionGetQuestionsByQuestionGroupIdByQuestionGroupIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<GetApiQuestionGetQuestionsByQuestionGroupIdByQuestionGroupIdResponse, unknown, ThrowOnError>({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    responseTransformer: getApiQuestionGetQuestionsByQuestionGroupIdByQuestionGroupIdResponseTransformer,
    url: "/api/Question/GetQuestionsByQuestionGroupId/{questionGroupId}",
    ...options,
  });
};

export const getApiQuestionGetQuestionByQuestionId = <ThrowOnError extends boolean = false>(options: Options<GetApiQuestionGetQuestionByQuestionIdData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).get<GetApiQuestionGetQuestionByQuestionIdResponse, unknown, ThrowOnError>({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    responseTransformer: getApiQuestionGetQuestionByQuestionIdResponseTransformer,
    url: "/api/Question/GetQuestion/{questionId}",
    ...options,
  });
};

export const postApiQuestionCreateQuestion = <ThrowOnError extends boolean = false>(options?: Options<PostApiQuestionCreateQuestionData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/Question/CreateQuestion",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

export const putApiQuestionUpdateQuestion = <ThrowOnError extends boolean = false>(options?: Options<PutApiQuestionUpdateQuestionData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).put<unknown, unknown, ThrowOnError>({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/Question/UpdateQuestion",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

export const deleteApiQuestionDeleteQuestionByQuestionId = <ThrowOnError extends boolean = false>(
  options: Options<DeleteApiQuestionDeleteQuestionByQuestionIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/Question/DeleteQuestion/{questionId}",
    ...options,
  });
};

export const getApiQuestionGroupGetQuestionGroupsForCurrentUser = <ThrowOnError extends boolean = false>(
  options?: Options<GetApiQuestionGroupGetQuestionGroupsForCurrentUserData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<GetApiQuestionGroupGetQuestionGroupsForCurrentUserResponse, unknown, ThrowOnError>({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    responseTransformer: getApiQuestionGroupGetQuestionGroupsForCurrentUserResponseTransformer,
    url: "/api/QuestionGroup/GetQuestionGroupsForCurrentUser",
    ...options,
  });
};

export const getApiQuestionGroupGetQuestionGroupsByQuizIdByQuizId = <ThrowOnError extends boolean = false>(
  options: Options<GetApiQuestionGroupGetQuestionGroupsByQuizIdByQuizIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<GetApiQuestionGroupGetQuestionGroupsByQuizIdByQuizIdResponse, unknown, ThrowOnError>({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    responseTransformer: getApiQuestionGroupGetQuestionGroupsByQuizIdByQuizIdResponseTransformer,
    url: "/api/QuestionGroup/GetQuestionGroupsByQuizId/{quizId}",
    ...options,
  });
};

export const getApiQuestionGroupGetQuestionGroupByQuestionGroupId = <ThrowOnError extends boolean = false>(
  options: Options<GetApiQuestionGroupGetQuestionGroupByQuestionGroupIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<GetApiQuestionGroupGetQuestionGroupByQuestionGroupIdResponse, unknown, ThrowOnError>({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    responseTransformer: getApiQuestionGroupGetQuestionGroupByQuestionGroupIdResponseTransformer,
    url: "/api/QuestionGroup/GetQuestionGroup/{questionGroupId}",
    ...options,
  });
};

export const postApiQuestionGroupCreateQuestionGroup = <ThrowOnError extends boolean = false>(options?: Options<PostApiQuestionGroupCreateQuestionGroupData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/QuestionGroup/CreateQuestionGroup",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

export const putApiQuestionGroupUpdateQuestionGroup = <ThrowOnError extends boolean = false>(options?: Options<PutApiQuestionGroupUpdateQuestionGroupData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).put<unknown, unknown, ThrowOnError>({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/QuestionGroup/UpdateQuestionGroup",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

export const deleteApiQuestionGroupDeleteQuestionGroupByQuestionGroupId = <ThrowOnError extends boolean = false>(
  options: Options<DeleteApiQuestionGroupDeleteQuestionGroupByQuestionGroupIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/QuestionGroup/DeleteQuestionGroup/{questionGroupId}",
    ...options,
  });
};

export const getApiQuizGetQuizzesForCurrentUser = <ThrowOnError extends boolean = false>(options?: Options<GetApiQuizGetQuizzesForCurrentUserData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).get<GetApiQuizGetQuizzesForCurrentUserResponse, unknown, ThrowOnError>({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    responseTransformer: getApiQuizGetQuizzesForCurrentUserResponseTransformer,
    url: "/api/Quiz/GetQuizzesForCurrentUser",
    ...options,
  });
};

export const getApiQuizGetQuizByCurrentGameIdByCurrentGameId = <ThrowOnError extends boolean = false>(
  options: Options<GetApiQuizGetQuizByCurrentGameIdByCurrentGameIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<GetApiQuizGetQuizByCurrentGameIdByCurrentGameIdResponse, unknown, ThrowOnError>({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    responseTransformer: getApiQuizGetQuizByCurrentGameIdByCurrentGameIdResponseTransformer,
    url: "/api/Quiz/GetQuizByCurrentGameId/{currentGameId}",
    ...options,
  });
};

export const getApiQuizGetQuizByQuizId = <ThrowOnError extends boolean = false>(options: Options<GetApiQuizGetQuizByQuizIdData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).get<GetApiQuizGetQuizByQuizIdResponse, unknown, ThrowOnError>({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    responseTransformer: getApiQuizGetQuizByQuizIdResponseTransformer,
    url: "/api/Quiz/GetQuiz/{quizId}",
    ...options,
  });
};

export const postApiQuizCreateQuiz = <ThrowOnError extends boolean = false>(options?: Options<PostApiQuizCreateQuizData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/Quiz/CreateQuiz",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

export const putApiQuizUpdateQuiz = <ThrowOnError extends boolean = false>(options?: Options<PutApiQuizUpdateQuizData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).put<unknown, unknown, ThrowOnError>({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/Quiz/UpdateQuiz",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

export const deleteApiQuizDeleteQuizByQuizId = <ThrowOnError extends boolean = false>(options: Options<DeleteApiQuizDeleteQuizByQuizIdData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/Quiz/DeleteQuiz/{quizId}",
    ...options,
  });
};

export const getApiUserGetCurrentUser = <ThrowOnError extends boolean = false>(options?: Options<GetApiUserGetCurrentUserData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).get<GetApiUserGetCurrentUserResponse, unknown, ThrowOnError>({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    responseTransformer: getApiUserGetCurrentUserResponseTransformer,
    url: "/api/User/GetCurrentUser",
    ...options,
  });
};

export const postApiUserCreateUser = <ThrowOnError extends boolean = false>(options?: Options<PostApiUserCreateUserData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/User/CreateUser",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

export const putApiUserUpdateUser = <ThrowOnError extends boolean = false>(options?: Options<PutApiUserUpdateUserData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).put<unknown, unknown, ThrowOnError>({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/User/UpdateUser",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

export const deleteApiUserDeleteUserByUserId = <ThrowOnError extends boolean = false>(options: Options<DeleteApiUserDeleteUserByUserIdData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/User/DeleteUser/{userId}",
    ...options,
  });
};
