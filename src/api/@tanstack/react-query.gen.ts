// This file is auto-generated by @hey-api/openapi-ts

import {
  type Options,
  postApiAuthenticationLogin,
  postApiAuthenticationReauthenticate,
  getApiCurrentGameGetCurrentGameForCurrentUser,
  getApiCurrentGameGetCurrentGameBySessionIdBySessionId,
  postApiCurrentGameCreateCurrentGame,
  putApiCurrentGameUpdateCurrentGame,
  deleteApiCurrentGameDeleteCurrentGameByCurrentGameId,
  postApiGameFlowAddUserToCurrentGame,
  postApiGameFlowStartGame,
  postApiGameFlowSelectQuestion,
  postApiGameFlowSubmitAnswer,
  postApiGameFlowRobQuestion,
  postApiGameFlowLeaveGame,
  postApiGameFlowCancelGame,
  postApiGameFlowSelectNextPlayer,
  postApiGameFlowAllowRobbing,
  getApiHealth,
  getApiHealthDetailed,
  getApiHealthDatabase,
  getApiHealthMetrics,
  getApiPreviousGameGetPreviousGamesForCurrentUser,
  getApiPreviousGameGetPreviousGameBySessionIdBySessionId,
  getApiQuestionGetQuestionsForCurrentUser,
  getApiQuestionGetQuestionsByQuestionGroupIdByQuestionGroupId,
  getApiQuestionGetQuestionByQuestionId,
  postApiQuestionCreateQuestion,
  putApiQuestionUpdateQuestion,
  deleteApiQuestionDeleteQuestionByQuestionId,
  getApiQuestionGroupGetQuestionGroupsForCurrentUser,
  getApiQuestionGroupGetQuestionGroupsByQuizIdByQuizId,
  getApiQuestionGroupGetQuestionGroupByQuestionGroupId,
  postApiQuestionGroupCreateQuestionGroup,
  putApiQuestionGroupUpdateQuestionGroup,
  deleteApiQuestionGroupDeleteQuestionGroupByQuestionGroupId,
  getApiQuizGetQuizzesForCurrentUser,
  getApiQuizGetQuizByCurrentGameIdByCurrentGameId,
  getApiQuizGetQuizByQuizId,
  postApiQuizCreateQuiz,
  putApiQuizUpdateQuiz,
  deleteApiQuizDeleteQuizByQuizId,
  getApiUserGetCurrentUser,
  postApiUserCreateUser,
  putApiUserUpdateUser,
  deleteApiUserDeleteUserByUserId,
} from "../sdk.gen";
import { queryOptions, type UseMutationOptions, type DefaultError } from "@tanstack/react-query";
import type {
  PostApiAuthenticationLoginData,
  PostApiAuthenticationLoginResponse,
  PostApiAuthenticationReauthenticateData,
  PostApiAuthenticationReauthenticateResponse,
  GetApiCurrentGameGetCurrentGameForCurrentUserData,
  GetApiCurrentGameGetCurrentGameBySessionIdBySessionIdData,
  PostApiCurrentGameCreateCurrentGameData,
  PutApiCurrentGameUpdateCurrentGameData,
  DeleteApiCurrentGameDeleteCurrentGameByCurrentGameIdData,
  PostApiGameFlowAddUserToCurrentGameData,
  PostApiGameFlowStartGameData,
  PostApiGameFlowSelectQuestionData,
  PostApiGameFlowSubmitAnswerData,
  PostApiGameFlowSubmitAnswerResponse,
  PostApiGameFlowRobQuestionData,
  PostApiGameFlowRobQuestionResponse,
  PostApiGameFlowLeaveGameData,
  PostApiGameFlowCancelGameData,
  PostApiGameFlowSelectNextPlayerData,
  PostApiGameFlowAllowRobbingData,
  GetApiHealthData,
  GetApiHealthDetailedData,
  GetApiHealthDatabaseData,
  GetApiHealthMetricsData,
  GetApiPreviousGameGetPreviousGamesForCurrentUserData,
  GetApiPreviousGameGetPreviousGameBySessionIdBySessionIdData,
  GetApiQuestionGetQuestionsForCurrentUserData,
  GetApiQuestionGetQuestionsByQuestionGroupIdByQuestionGroupIdData,
  GetApiQuestionGetQuestionByQuestionIdData,
  PostApiQuestionCreateQuestionData,
  PutApiQuestionUpdateQuestionData,
  DeleteApiQuestionDeleteQuestionByQuestionIdData,
  GetApiQuestionGroupGetQuestionGroupsForCurrentUserData,
  GetApiQuestionGroupGetQuestionGroupsByQuizIdByQuizIdData,
  GetApiQuestionGroupGetQuestionGroupByQuestionGroupIdData,
  PostApiQuestionGroupCreateQuestionGroupData,
  PutApiQuestionGroupUpdateQuestionGroupData,
  DeleteApiQuestionGroupDeleteQuestionGroupByQuestionGroupIdData,
  GetApiQuizGetQuizzesForCurrentUserData,
  GetApiQuizGetQuizByCurrentGameIdByCurrentGameIdData,
  GetApiQuizGetQuizByQuizIdData,
  PostApiQuizCreateQuizData,
  PutApiQuizUpdateQuizData,
  DeleteApiQuizDeleteQuizByQuizIdData,
  GetApiUserGetCurrentUserData,
  PostApiUserCreateUserData,
  PutApiUserUpdateUserData,
  DeleteApiUserDeleteUserByUserIdData,
} from "../types.gen";
import { client as _heyApiClient } from "../client.gen";

export type QueryKey<TOptions extends Options> = [
  Pick<TOptions, "baseUrl" | "body" | "headers" | "path" | "query"> & {
    _id: string;
    _infinite?: boolean;
  },
];

const createQueryKey = <TOptions extends Options>(id: string, options?: TOptions, infinite?: boolean): [QueryKey<TOptions>[0]] => {
  const params: QueryKey<TOptions>[0] = { _id: id, baseUrl: (options?.client ?? _heyApiClient).getConfig().baseUrl } as QueryKey<TOptions>[0];
  if (infinite) {
    params._infinite = infinite;
  }
  if (options?.body) {
    params.body = options.body;
  }
  if (options?.headers) {
    params.headers = options.headers;
  }
  if (options?.path) {
    params.path = options.path;
  }
  if (options?.query) {
    params.query = options.query;
  }
  return [params];
};

export const postApiAuthenticationLoginQueryKey = (options?: Options<PostApiAuthenticationLoginData>) => createQueryKey("postApiAuthenticationLogin", options);

export const postApiAuthenticationLoginMutation = (
  options?: Partial<Options<PostApiAuthenticationLoginData>>,
): UseMutationOptions<PostApiAuthenticationLoginResponse, DefaultError, Options<PostApiAuthenticationLoginData>> => {
  const mutationOptions: UseMutationOptions<PostApiAuthenticationLoginResponse, DefaultError, Options<PostApiAuthenticationLoginData>> = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiAuthenticationLogin({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postApiAuthenticationReauthenticateQueryKey = (options?: Options<PostApiAuthenticationReauthenticateData>) =>
  createQueryKey("postApiAuthenticationReauthenticate", options);

export const postApiAuthenticationReauthenticateMutation = (
  options?: Partial<Options<PostApiAuthenticationReauthenticateData>>,
): UseMutationOptions<PostApiAuthenticationReauthenticateResponse, DefaultError, Options<PostApiAuthenticationReauthenticateData>> => {
  const mutationOptions: UseMutationOptions<PostApiAuthenticationReauthenticateResponse, DefaultError, Options<PostApiAuthenticationReauthenticateData>> = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiAuthenticationReauthenticate({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiCurrentGameGetCurrentGameForCurrentUserQueryKey = (options?: Options<GetApiCurrentGameGetCurrentGameForCurrentUserData>) =>
  createQueryKey("getApiCurrentGameGetCurrentGameForCurrentUser", options);

export const getApiCurrentGameGetCurrentGameForCurrentUserOptions = (options?: Options<GetApiCurrentGameGetCurrentGameForCurrentUserData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiCurrentGameGetCurrentGameForCurrentUser({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiCurrentGameGetCurrentGameForCurrentUserQueryKey(options),
  });
};

export const getApiCurrentGameGetCurrentGameBySessionIdBySessionIdQueryKey = (options: Options<GetApiCurrentGameGetCurrentGameBySessionIdBySessionIdData>) =>
  createQueryKey("getApiCurrentGameGetCurrentGameBySessionIdBySessionId", options);

export const getApiCurrentGameGetCurrentGameBySessionIdBySessionIdOptions = (options: Options<GetApiCurrentGameGetCurrentGameBySessionIdBySessionIdData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiCurrentGameGetCurrentGameBySessionIdBySessionId({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiCurrentGameGetCurrentGameBySessionIdBySessionIdQueryKey(options),
  });
};

export const postApiCurrentGameCreateCurrentGameQueryKey = (options?: Options<PostApiCurrentGameCreateCurrentGameData>) =>
  createQueryKey("postApiCurrentGameCreateCurrentGame", options);

export const postApiCurrentGameCreateCurrentGameMutation = (
  options?: Partial<Options<PostApiCurrentGameCreateCurrentGameData>>,
): UseMutationOptions<unknown, DefaultError, Options<PostApiCurrentGameCreateCurrentGameData>> => {
  const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<PostApiCurrentGameCreateCurrentGameData>> = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiCurrentGameCreateCurrentGame({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const putApiCurrentGameUpdateCurrentGameMutation = (
  options?: Partial<Options<PutApiCurrentGameUpdateCurrentGameData>>,
): UseMutationOptions<unknown, DefaultError, Options<PutApiCurrentGameUpdateCurrentGameData>> => {
  const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<PutApiCurrentGameUpdateCurrentGameData>> = {
    mutationFn: async (localOptions) => {
      const { data } = await putApiCurrentGameUpdateCurrentGame({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const deleteApiCurrentGameDeleteCurrentGameByCurrentGameIdMutation = (
  options?: Partial<Options<DeleteApiCurrentGameDeleteCurrentGameByCurrentGameIdData>>,
): UseMutationOptions<unknown, DefaultError, Options<DeleteApiCurrentGameDeleteCurrentGameByCurrentGameIdData>> => {
  const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<DeleteApiCurrentGameDeleteCurrentGameByCurrentGameIdData>> = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteApiCurrentGameDeleteCurrentGameByCurrentGameId({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postApiGameFlowAddUserToCurrentGameQueryKey = (options?: Options<PostApiGameFlowAddUserToCurrentGameData>) =>
  createQueryKey("postApiGameFlowAddUserToCurrentGame", options);

export const postApiGameFlowAddUserToCurrentGameMutation = (
  options?: Partial<Options<PostApiGameFlowAddUserToCurrentGameData>>,
): UseMutationOptions<unknown, DefaultError, Options<PostApiGameFlowAddUserToCurrentGameData>> => {
  const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<PostApiGameFlowAddUserToCurrentGameData>> = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiGameFlowAddUserToCurrentGame({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postApiGameFlowStartGameQueryKey = (options?: Options<PostApiGameFlowStartGameData>) => createQueryKey("postApiGameFlowStartGame", options);

export const postApiGameFlowStartGameMutation = (
  options?: Partial<Options<PostApiGameFlowStartGameData>>,
): UseMutationOptions<unknown, DefaultError, Options<PostApiGameFlowStartGameData>> => {
  const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<PostApiGameFlowStartGameData>> = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiGameFlowStartGame({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postApiGameFlowSelectQuestionQueryKey = (options?: Options<PostApiGameFlowSelectQuestionData>) => createQueryKey("postApiGameFlowSelectQuestion", options);

export const postApiGameFlowSelectQuestionMutation = (
  options?: Partial<Options<PostApiGameFlowSelectQuestionData>>,
): UseMutationOptions<unknown, DefaultError, Options<PostApiGameFlowSelectQuestionData>> => {
  const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<PostApiGameFlowSelectQuestionData>> = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiGameFlowSelectQuestion({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postApiGameFlowSubmitAnswerQueryKey = (options?: Options<PostApiGameFlowSubmitAnswerData>) => createQueryKey("postApiGameFlowSubmitAnswer", options);

export const postApiGameFlowSubmitAnswerMutation = (
  options?: Partial<Options<PostApiGameFlowSubmitAnswerData>>,
): UseMutationOptions<PostApiGameFlowSubmitAnswerResponse, DefaultError, Options<PostApiGameFlowSubmitAnswerData>> => {
  const mutationOptions: UseMutationOptions<PostApiGameFlowSubmitAnswerResponse, DefaultError, Options<PostApiGameFlowSubmitAnswerData>> = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiGameFlowSubmitAnswer({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postApiGameFlowRobQuestionQueryKey = (options?: Options<PostApiGameFlowRobQuestionData>) => createQueryKey("postApiGameFlowRobQuestion", options);

export const postApiGameFlowRobQuestionMutation = (
  options?: Partial<Options<PostApiGameFlowRobQuestionData>>,
): UseMutationOptions<PostApiGameFlowRobQuestionResponse, DefaultError, Options<PostApiGameFlowRobQuestionData>> => {
  const mutationOptions: UseMutationOptions<PostApiGameFlowRobQuestionResponse, DefaultError, Options<PostApiGameFlowRobQuestionData>> = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiGameFlowRobQuestion({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postApiGameFlowLeaveGameQueryKey = (options?: Options<PostApiGameFlowLeaveGameData>) => createQueryKey("postApiGameFlowLeaveGame", options);

export const postApiGameFlowLeaveGameMutation = (
  options?: Partial<Options<PostApiGameFlowLeaveGameData>>,
): UseMutationOptions<unknown, DefaultError, Options<PostApiGameFlowLeaveGameData>> => {
  const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<PostApiGameFlowLeaveGameData>> = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiGameFlowLeaveGame({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postApiGameFlowCancelGameQueryKey = (options?: Options<PostApiGameFlowCancelGameData>) => createQueryKey("postApiGameFlowCancelGame", options);

export const postApiGameFlowCancelGameMutation = (
  options?: Partial<Options<PostApiGameFlowCancelGameData>>,
): UseMutationOptions<unknown, DefaultError, Options<PostApiGameFlowCancelGameData>> => {
  const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<PostApiGameFlowCancelGameData>> = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiGameFlowCancelGame({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postApiGameFlowSelectNextPlayerQueryKey = (options?: Options<PostApiGameFlowSelectNextPlayerData>) => createQueryKey("postApiGameFlowSelectNextPlayer", options);

export const postApiGameFlowSelectNextPlayerMutation = (
  options?: Partial<Options<PostApiGameFlowSelectNextPlayerData>>,
): UseMutationOptions<unknown, DefaultError, Options<PostApiGameFlowSelectNextPlayerData>> => {
  const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<PostApiGameFlowSelectNextPlayerData>> = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiGameFlowSelectNextPlayer({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postApiGameFlowAllowRobbingQueryKey = (options?: Options<PostApiGameFlowAllowRobbingData>) => createQueryKey("postApiGameFlowAllowRobbing", options);

export const postApiGameFlowAllowRobbingMutation = (
  options?: Partial<Options<PostApiGameFlowAllowRobbingData>>,
): UseMutationOptions<unknown, DefaultError, Options<PostApiGameFlowAllowRobbingData>> => {
  const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<PostApiGameFlowAllowRobbingData>> = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiGameFlowAllowRobbing({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiHealthQueryKey = (options?: Options<GetApiHealthData>) => createQueryKey("getApiHealth", options);

export const getApiHealthOptions = (options?: Options<GetApiHealthData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiHealth({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiHealthQueryKey(options),
  });
};

export const getApiHealthDetailedQueryKey = (options?: Options<GetApiHealthDetailedData>) => createQueryKey("getApiHealthDetailed", options);

export const getApiHealthDetailedOptions = (options?: Options<GetApiHealthDetailedData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiHealthDetailed({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiHealthDetailedQueryKey(options),
  });
};

export const getApiHealthDatabaseQueryKey = (options?: Options<GetApiHealthDatabaseData>) => createQueryKey("getApiHealthDatabase", options);

export const getApiHealthDatabaseOptions = (options?: Options<GetApiHealthDatabaseData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiHealthDatabase({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiHealthDatabaseQueryKey(options),
  });
};

export const getApiHealthMetricsQueryKey = (options?: Options<GetApiHealthMetricsData>) => createQueryKey("getApiHealthMetrics", options);

export const getApiHealthMetricsOptions = (options?: Options<GetApiHealthMetricsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiHealthMetrics({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiHealthMetricsQueryKey(options),
  });
};

export const getApiPreviousGameGetPreviousGamesForCurrentUserQueryKey = (options?: Options<GetApiPreviousGameGetPreviousGamesForCurrentUserData>) =>
  createQueryKey("getApiPreviousGameGetPreviousGamesForCurrentUser", options);

export const getApiPreviousGameGetPreviousGamesForCurrentUserOptions = (options?: Options<GetApiPreviousGameGetPreviousGamesForCurrentUserData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiPreviousGameGetPreviousGamesForCurrentUser({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiPreviousGameGetPreviousGamesForCurrentUserQueryKey(options),
  });
};

export const getApiPreviousGameGetPreviousGameBySessionIdBySessionIdQueryKey = (options: Options<GetApiPreviousGameGetPreviousGameBySessionIdBySessionIdData>) =>
  createQueryKey("getApiPreviousGameGetPreviousGameBySessionIdBySessionId", options);

export const getApiPreviousGameGetPreviousGameBySessionIdBySessionIdOptions = (options: Options<GetApiPreviousGameGetPreviousGameBySessionIdBySessionIdData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiPreviousGameGetPreviousGameBySessionIdBySessionId({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiPreviousGameGetPreviousGameBySessionIdBySessionIdQueryKey(options),
  });
};

export const getApiQuestionGetQuestionsForCurrentUserQueryKey = (options?: Options<GetApiQuestionGetQuestionsForCurrentUserData>) =>
  createQueryKey("getApiQuestionGetQuestionsForCurrentUser", options);

export const getApiQuestionGetQuestionsForCurrentUserOptions = (options?: Options<GetApiQuestionGetQuestionsForCurrentUserData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiQuestionGetQuestionsForCurrentUser({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiQuestionGetQuestionsForCurrentUserQueryKey(options),
  });
};

export const getApiQuestionGetQuestionsByQuestionGroupIdByQuestionGroupIdQueryKey = (options: Options<GetApiQuestionGetQuestionsByQuestionGroupIdByQuestionGroupIdData>) =>
  createQueryKey("getApiQuestionGetQuestionsByQuestionGroupIdByQuestionGroupId", options);

export const getApiQuestionGetQuestionsByQuestionGroupIdByQuestionGroupIdOptions = (options: Options<GetApiQuestionGetQuestionsByQuestionGroupIdByQuestionGroupIdData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiQuestionGetQuestionsByQuestionGroupIdByQuestionGroupId({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiQuestionGetQuestionsByQuestionGroupIdByQuestionGroupIdQueryKey(options),
  });
};

export const getApiQuestionGetQuestionByQuestionIdQueryKey = (options: Options<GetApiQuestionGetQuestionByQuestionIdData>) =>
  createQueryKey("getApiQuestionGetQuestionByQuestionId", options);

export const getApiQuestionGetQuestionByQuestionIdOptions = (options: Options<GetApiQuestionGetQuestionByQuestionIdData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiQuestionGetQuestionByQuestionId({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiQuestionGetQuestionByQuestionIdQueryKey(options),
  });
};

export const postApiQuestionCreateQuestionQueryKey = (options?: Options<PostApiQuestionCreateQuestionData>) => createQueryKey("postApiQuestionCreateQuestion", options);

export const postApiQuestionCreateQuestionMutation = (
  options?: Partial<Options<PostApiQuestionCreateQuestionData>>,
): UseMutationOptions<unknown, DefaultError, Options<PostApiQuestionCreateQuestionData>> => {
  const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<PostApiQuestionCreateQuestionData>> = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiQuestionCreateQuestion({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const putApiQuestionUpdateQuestionMutation = (
  options?: Partial<Options<PutApiQuestionUpdateQuestionData>>,
): UseMutationOptions<unknown, DefaultError, Options<PutApiQuestionUpdateQuestionData>> => {
  const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<PutApiQuestionUpdateQuestionData>> = {
    mutationFn: async (localOptions) => {
      const { data } = await putApiQuestionUpdateQuestion({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const deleteApiQuestionDeleteQuestionByQuestionIdMutation = (
  options?: Partial<Options<DeleteApiQuestionDeleteQuestionByQuestionIdData>>,
): UseMutationOptions<unknown, DefaultError, Options<DeleteApiQuestionDeleteQuestionByQuestionIdData>> => {
  const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<DeleteApiQuestionDeleteQuestionByQuestionIdData>> = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteApiQuestionDeleteQuestionByQuestionId({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiQuestionGroupGetQuestionGroupsForCurrentUserQueryKey = (options?: Options<GetApiQuestionGroupGetQuestionGroupsForCurrentUserData>) =>
  createQueryKey("getApiQuestionGroupGetQuestionGroupsForCurrentUser", options);

export const getApiQuestionGroupGetQuestionGroupsForCurrentUserOptions = (options?: Options<GetApiQuestionGroupGetQuestionGroupsForCurrentUserData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiQuestionGroupGetQuestionGroupsForCurrentUser({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiQuestionGroupGetQuestionGroupsForCurrentUserQueryKey(options),
  });
};

export const getApiQuestionGroupGetQuestionGroupsByQuizIdByQuizIdQueryKey = (options: Options<GetApiQuestionGroupGetQuestionGroupsByQuizIdByQuizIdData>) =>
  createQueryKey("getApiQuestionGroupGetQuestionGroupsByQuizIdByQuizId", options);

export const getApiQuestionGroupGetQuestionGroupsByQuizIdByQuizIdOptions = (options: Options<GetApiQuestionGroupGetQuestionGroupsByQuizIdByQuizIdData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiQuestionGroupGetQuestionGroupsByQuizIdByQuizId({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiQuestionGroupGetQuestionGroupsByQuizIdByQuizIdQueryKey(options),
  });
};

export const getApiQuestionGroupGetQuestionGroupByQuestionGroupIdQueryKey = (options: Options<GetApiQuestionGroupGetQuestionGroupByQuestionGroupIdData>) =>
  createQueryKey("getApiQuestionGroupGetQuestionGroupByQuestionGroupId", options);

export const getApiQuestionGroupGetQuestionGroupByQuestionGroupIdOptions = (options: Options<GetApiQuestionGroupGetQuestionGroupByQuestionGroupIdData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiQuestionGroupGetQuestionGroupByQuestionGroupId({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiQuestionGroupGetQuestionGroupByQuestionGroupIdQueryKey(options),
  });
};

export const postApiQuestionGroupCreateQuestionGroupQueryKey = (options?: Options<PostApiQuestionGroupCreateQuestionGroupData>) =>
  createQueryKey("postApiQuestionGroupCreateQuestionGroup", options);

export const postApiQuestionGroupCreateQuestionGroupMutation = (
  options?: Partial<Options<PostApiQuestionGroupCreateQuestionGroupData>>,
): UseMutationOptions<unknown, DefaultError, Options<PostApiQuestionGroupCreateQuestionGroupData>> => {
  const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<PostApiQuestionGroupCreateQuestionGroupData>> = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiQuestionGroupCreateQuestionGroup({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const putApiQuestionGroupUpdateQuestionGroupMutation = (
  options?: Partial<Options<PutApiQuestionGroupUpdateQuestionGroupData>>,
): UseMutationOptions<unknown, DefaultError, Options<PutApiQuestionGroupUpdateQuestionGroupData>> => {
  const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<PutApiQuestionGroupUpdateQuestionGroupData>> = {
    mutationFn: async (localOptions) => {
      const { data } = await putApiQuestionGroupUpdateQuestionGroup({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const deleteApiQuestionGroupDeleteQuestionGroupByQuestionGroupIdMutation = (
  options?: Partial<Options<DeleteApiQuestionGroupDeleteQuestionGroupByQuestionGroupIdData>>,
): UseMutationOptions<unknown, DefaultError, Options<DeleteApiQuestionGroupDeleteQuestionGroupByQuestionGroupIdData>> => {
  const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<DeleteApiQuestionGroupDeleteQuestionGroupByQuestionGroupIdData>> = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteApiQuestionGroupDeleteQuestionGroupByQuestionGroupId({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiQuizGetQuizzesForCurrentUserQueryKey = (options?: Options<GetApiQuizGetQuizzesForCurrentUserData>) =>
  createQueryKey("getApiQuizGetQuizzesForCurrentUser", options);

export const getApiQuizGetQuizzesForCurrentUserOptions = (options?: Options<GetApiQuizGetQuizzesForCurrentUserData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiQuizGetQuizzesForCurrentUser({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiQuizGetQuizzesForCurrentUserQueryKey(options),
  });
};

export const getApiQuizGetQuizByCurrentGameIdByCurrentGameIdQueryKey = (options: Options<GetApiQuizGetQuizByCurrentGameIdByCurrentGameIdData>) =>
  createQueryKey("getApiQuizGetQuizByCurrentGameIdByCurrentGameId", options);

export const getApiQuizGetQuizByCurrentGameIdByCurrentGameIdOptions = (options: Options<GetApiQuizGetQuizByCurrentGameIdByCurrentGameIdData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiQuizGetQuizByCurrentGameIdByCurrentGameId({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiQuizGetQuizByCurrentGameIdByCurrentGameIdQueryKey(options),
  });
};

export const getApiQuizGetQuizByQuizIdQueryKey = (options: Options<GetApiQuizGetQuizByQuizIdData>) => createQueryKey("getApiQuizGetQuizByQuizId", options);

export const getApiQuizGetQuizByQuizIdOptions = (options: Options<GetApiQuizGetQuizByQuizIdData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiQuizGetQuizByQuizId({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiQuizGetQuizByQuizIdQueryKey(options),
  });
};

export const postApiQuizCreateQuizQueryKey = (options?: Options<PostApiQuizCreateQuizData>) => createQueryKey("postApiQuizCreateQuiz", options);

export const postApiQuizCreateQuizMutation = (
  options?: Partial<Options<PostApiQuizCreateQuizData>>,
): UseMutationOptions<unknown, DefaultError, Options<PostApiQuizCreateQuizData>> => {
  const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<PostApiQuizCreateQuizData>> = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiQuizCreateQuiz({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const putApiQuizUpdateQuizMutation = (
  options?: Partial<Options<PutApiQuizUpdateQuizData>>,
): UseMutationOptions<unknown, DefaultError, Options<PutApiQuizUpdateQuizData>> => {
  const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<PutApiQuizUpdateQuizData>> = {
    mutationFn: async (localOptions) => {
      const { data } = await putApiQuizUpdateQuiz({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const deleteApiQuizDeleteQuizByQuizIdMutation = (
  options?: Partial<Options<DeleteApiQuizDeleteQuizByQuizIdData>>,
): UseMutationOptions<unknown, DefaultError, Options<DeleteApiQuizDeleteQuizByQuizIdData>> => {
  const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<DeleteApiQuizDeleteQuizByQuizIdData>> = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteApiQuizDeleteQuizByQuizId({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiUserGetCurrentUserQueryKey = (options?: Options<GetApiUserGetCurrentUserData>) => createQueryKey("getApiUserGetCurrentUser", options);

export const getApiUserGetCurrentUserOptions = (options?: Options<GetApiUserGetCurrentUserData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiUserGetCurrentUser({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiUserGetCurrentUserQueryKey(options),
  });
};

export const postApiUserCreateUserQueryKey = (options?: Options<PostApiUserCreateUserData>) => createQueryKey("postApiUserCreateUser", options);

export const postApiUserCreateUserMutation = (
  options?: Partial<Options<PostApiUserCreateUserData>>,
): UseMutationOptions<unknown, DefaultError, Options<PostApiUserCreateUserData>> => {
  const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<PostApiUserCreateUserData>> = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiUserCreateUser({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const putApiUserUpdateUserMutation = (
  options?: Partial<Options<PutApiUserUpdateUserData>>,
): UseMutationOptions<unknown, DefaultError, Options<PutApiUserUpdateUserData>> => {
  const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<PutApiUserUpdateUserData>> = {
    mutationFn: async (localOptions) => {
      const { data } = await putApiUserUpdateUser({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const deleteApiUserDeleteUserByUserIdMutation = (
  options?: Partial<Options<DeleteApiUserDeleteUserByUserIdData>>,
): UseMutationOptions<unknown, DefaultError, Options<DeleteApiUserDeleteUserByUserIdData>> => {
  const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<DeleteApiUserDeleteUserByUserIdData>> = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteApiUserDeleteUserByUserId({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};
